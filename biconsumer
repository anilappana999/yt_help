BiConsumer Interface:
It is a interface which accepts two input arguments and return no result
We will use it when we have requirement like we need to pass two arguments and some operation to be performed on it and we don't expect any result from it

public class Test {

	public static void main(String[] args) {

		BiConsumer<String, String> biConsumer = (i, j) -> {

			System.out.println(i + " " + j);

		};

		biConsumer.accept("Hello", "Guys");

	}

}

forEach uses BiConsumer as internal implementation in forEach loop attach screenshot


BiPredicate Interface:

It accepts two input arguments and returns boolean result based on condition evaluated on those parameters 

public class Test {

	public static void main(String[] args) {

		
		
		BiPredicate<Integer, Integer> biPredicate = (Integer i,Integer j) ->{
			
			return i==j;
			
		};
		
		System.out.println(biPredicate.test(1, 1));

	}

}



BiFunctional Interface:
It accepts two argument and produces a result
we will use this function interface when we have requirement like we need to pass two arguments and some operation to be performed on them and we need result of operation performed

public class Test {

	public static void main(String[] args) {

		BiFunction<Integer, Integer, Integer> biFun = (i, j) -> {

			return i + j;
		};

		System.out.println(biFun.apply(22, 23));

	}

}

example: computeIfPresent,absent,compute in map

